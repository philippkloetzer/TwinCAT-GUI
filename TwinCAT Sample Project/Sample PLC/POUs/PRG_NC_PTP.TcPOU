<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="PRG_NC_PTP" Id="{0e4283ca-91ff-4757-915c-db9d87cc05d7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_NC_PTP
VAR
	i				: INT;
	aAxisRef		: ARRAY[1..3] OF AXIS_REF;
	mcPower			: ARRAY[1..3] OF MC_Power;
	mcReset			: ARRAY[1..3] OF MC_Reset;
	mcMoveAbsolute	: ARRAY[1..3] OF MC_MoveAbsolute;
	mcHalt			: ARRAY[1..3] OF MC_Halt;
	mcJog			: ARRAY[1..3] OF MC_Jog;
	tonJogForward	: ARRAY[1..3] OF TON;
	tonJogBackwards	: ARRAY[1..3] OF TON;
	ftJogForward	: ARRAY[1..3] OF F_TRIG;
	ftJogBackwards	: ARRAY[1..3] OF F_TRIG;
	rtAbort			: ARRAY[1..3] OF R_TRIG;
	rtExecMoveAll	: R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[rtExecMoveAll(CLK:=GVL.stMoveAllCtrl.bExecute);
GVL.stMoveAllCtrl.bExecute R= GVL.bReset;
GVL.stMoveAllCtrl.bAbort R= GVL.bReset;
IF rtExecMoveAll.Q THEN
	GVL.stMoveAllState.bBusy := TRUE;
	GVL.aMoveAbsCtrl[1].bExecute := TRUE;
	GVL.aMoveAbsCtrl[2].bExecute := TRUE;
	GVL.aMoveAbsCtrl[3].bExecute := TRUE;
ELSIF GVL.stMoveAllState.bBusy THEN
	GVL.stMoveAllState.bDone := GVL.aMoveAbsState[1].bDone AND GVL.aMoveAbsState[2].bDone AND GVL.aMoveAbsState[3].bDone;
	GVL.stMoveAllState.bError := GVL.aMoveAbsState[1].bError OR GVL.aMoveAbsState[2].bError OR GVL.aMoveAbsState[3].bError;
	GVL.stMoveAllState.bAborted := (NOT GVL.aMoveAbsState[1].bBusy AND NOT GVL.aMoveAbsState[2].bBusy AND NOT GVL.aMoveAbsState[3].bBusy AND GVL.stMoveAllCtrl.bAbort);
	GVL.stMoveAllState.bBusy R= (NOT GVL.aMoveAbsState[1].bBusy AND NOT GVL.aMoveAbsState[2].bBusy AND NOT GVL.aMoveAbsState[3].bBusy);
	GVL.aMoveAbsCtrl[1].bAbort S= GVL.stMoveAllCtrl.bAbort OR (GVL.stMoveAllState.bError AND GVL.aMoveAbsState[1].bBusy);
	GVL.aMoveAbsCtrl[2].bAbort S= GVL.stMoveAllCtrl.bAbort OR (GVL.stMoveAllState.bError AND GVL.aMoveAbsState[2].bBusy);
	GVL.aMoveAbsCtrl[3].bAbort S= GVL.stMoveAllCtrl.bAbort OR (GVL.stMoveAllState.bError AND GVL.aMoveAbsState[3].bBusy);
ELSIF NOT GVL.stMoveAllCtrl.bExecute AND (GVL.stMoveAllState.bDone OR GVL.stMoveAllState.bError OR GVL.stMoveAllState.bAborted) THEN
	GVL.stMoveAllState.bDone := FALSE;
	GVL.stMoveAllState.bError := FALSE;
	GVL.stMoveAllState.bAborted := FALSE;
	GVL.aMoveAbsCtrl[1].bExecute := FALSE;
	GVL.aMoveAbsCtrl[2].bExecute := FALSE;
	GVL.aMoveAbsCtrl[3].bExecute := FALSE;
	GVL.aMoveAbsCtrl[1].bAbort := FALSE;
	GVL.aMoveAbsCtrl[2].bAbort := FALSE;
	GVL.aMoveAbsCtrl[3].bAbort := FALSE;
END_IF




FOR i:=1 TO 3 DO
	
	aAxisRef[i].ReadStatus();
	GVL.aAxisStatus[i].bError := aAxisRef[i].Status.Error;
	GVL.aAxisStatus[i].nErrorId := aAxisRef[i].Status.ErrorID;
	
	mcPower[i](
		Axis:= aAxisRef[i], 
		Enable:= GVL.aAxisPowerEnable[i], 
		Enable_Positive:= TRUE, 
		Enable_Negative:= TRUE, 
		Override:= GVL.fOverride*BOOL_TO_LREAL(NOT GVL.bFeedhold), 
		BufferMode:= , 
		Options:= , 
		Status=> GVL.aAxisPowerState[i].bStatus, 
		Busy=> GVL.aAxisPowerState[i].bBusy,  
		Active=> GVL.aAxisPowerState[i].bActive, 
		Error=> GVL.aAxisPowerState[i].bError,  
		ErrorID=> );
		
	mcReset[i](
		Axis:= aAxisRef[i], 
		Execute:= GVL.bReset AND aAxisRef[i].Status.Error,
		Done=> , 
		Busy=> , 
		Error=> ,  
		ErrorID=> );
		
	mcMoveAbsolute[i](
		Axis:= aAxisRef[i],
		Execute:= GVL.aMoveAbsCtrl[i].bExecute, 
		Position:= GVL.aTargetPos[i], 
		Velocity:= GVL.fVelocity, 
		Acceleration:= , 
		Deceleration:= , 
		Jerk:= , 
		BufferMode:= , 
		Options:= , 
		Done=> GVL.aMoveAbsState[i].bDone, 
		Busy=> GVL.aMoveAbsState[i].bBusy,  
		Active=> GVL.aMoveAbsState[i].bActive,  
		CommandAborted=> GVL.aMoveAbsState[i].bAborted, 
		Error=> GVL.aMoveAbsState[i].bError, 
		ErrorID=> GVL.aMoveAbsState[i].nErrorId);
	GVL.aMoveAbsCtrl[i].bExecute R= GVL.bReset;
		
	rtAbort[i](CLK:=GVL.aMoveAbsCtrl[i].bAbort);
	mcHalt[i](
		Axis:= aAxisRef[i],
		Execute:= rtAbort[i].Q OR GVL.bReset, 
		Deceleration:= , 
		Jerk:= , 
		BufferMode:= , 
		Options:= , 
		Done=> , 
		Busy=> , 
		Active=> , 
		CommandAborted=> , 
		Error=> , 
		ErrorID=> );
	GVL.aMoveAbsCtrl[i].bAbort R= GVL.bReset;
		
	IF NOT GVL.stProgramState.bBusy THEN
		
		GVL.aJogForward[i] := GVL.aJogForward[i] AND NOT GVL.bFeedhold;
		GVL.aJogBackwards[i] := GVL.aJogBackwards[i] AND NOT GVL.bFeedhold;
		tonJogForward[i](IN:=GVL.aJogForward[i],PT:=T#500MS);
		tonJogBackwards[i](IN:=GVL.aJogBackwards[i],PT:=T#500MS);
		ftJogForward[i](CLK:=NOT tonJogForward[i].Q AND GVL.aJogForward[i]);
		ftJogBackwards[i](CLK:=NOT tonJogBackwards[i].Q AND GVL.aJogBackwards[i]);
		IF tonJogForward[i].Q OR tonJogBackwards[i].Q THEN
			IF GVL.bRapid THEN
				mcJog[i].Mode := E_JogMode.MC_JOGMODE_STANDARD_FAST;
			ELSE
				mcJog[i].Mode := E_JogMode.MC_JOGMODE_STANDARD_SLOW;
			END_IF
			mcJog[i].JogForward := tonJogForward[i].Q;
			mcJog[i].JogBackwards := tonJogBackwards[i].Q;
			mcJog[i].Velocity := 500.0;
		ELSE
			mcJog[i].Mode := E_JogMode.MC_JOGMODE_INCHING;
			mcJog[i].Velocity := 100.0;
			mcJog[i].JogForward := ftJogForward[i].Q;
			mcJog[i].JogBackwards := ftJogBackwards[i].Q;
		END_IF
		
		mcJog[i](
			Axis:= aAxisRef[i],
	//		JogForward:= GVL.aJogForward[i],
	//		JogBackwards:= GVL.aJogBackwards[i], 
	//		Mode:= E_JogMode.MC_JOGMODE_STANDARD_FAST, 
			Position:= GVL.fInc, 
	//		Velocity:= 100.0, 
			Acceleration:= , 
			Deceleration:= , 
			Jerk:= , 
			Done=> , 
			Busy=> , 
			Active=> , 
			CommandAborted=> , 
			Error=> , 
			ErrorID=> );
	
	END_IF
		
	GVL.aActPos[i] := aAxisRef[i].NcToPlc.ActPos;
	
END_FOR

IF GVL.bIncPlus AND GVL.fInc<=10.0 THEN
	GVL.fInc := GVL.fInc * 10.0;	
ELSIF GVL.bIncMinus AND GVL.fInc>=0.01 THEN
	GVL.fInc := GVL.fInc / 10.0;
END_IF
GVL.bIncPlus := FALSE;
GVL.bIncMinus := FALSE;]]></ST>
    </Implementation>
    <LineIds Name="PRG_NC_PTP">
      <LineId Id="214" Count="0" />
      <LineId Id="307" Count="1" />
      <LineId Id="215" Count="1" />
      <LineId Id="227" Count="2" />
      <LineId Id="225" Count="1" />
      <LineId Id="230" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="258" Count="2" />
      <LineId Id="219" Count="0" />
      <LineId Id="221" Count="2" />
      <LineId Id="263" Count="4" />
      <LineId Id="262" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="268" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="10" Count="20" />
      <LineId Id="35" Count="15" />
      <LineId Id="190" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="53" Count="11" />
      <LineId Id="5" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="174" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="116" Count="3" />
      <LineId Id="114" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="75" Count="14" />
      <LineId Id="74" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="91" Count="2" />
      <LineId Id="68" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="133" Count="0" />
      <LineId Id="138" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>